import * as Discord from 'discord.js';

import { MigBotCommand } from '../botApi';
import { validateCommandRestrictions } from '../utils/botValidation';

import { config } from '../botConfig';

import { getHostUrl } from '../utils/networkUtil';
import { Console } from 'console';

export interface UserCmdInfo {
  user_id: string;
  last_call: number;
}

export default class Denuncia implements MigBotCommand {
  private readonly _command = 'denuncia';
  private migdrplogo: Discord.MessageAttachment;
  private bonobotlogo: Discord.MessageAttachment;
  private channel: string = 'üî¥„Éªusuarios_denunciados';

  private usuarios: Array<UserCmdInfo> = [];

  private attachFiles() {
    this.migdrplogo = new Discord.MessageAttachment(
      `${getHostUrl()}/img/migdrp-logo-small-red.png`,
      'migdrp-icon.png'
    );
    this.bonobotlogo = new Discord.MessageAttachment(
      `${getHostUrl()}/img/LOGO_bb_dsicordback.png`,
      'bb-logo.png'
    );
  }

  private getRule(rule: number) {
    const rules = [
      `**Regla 1** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ‚Ñéùëéùëêùëíùëü ùë†ùëùùëéùëö.```'}`,

      `**Regla 2** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ùëõùëñùëõùëîùë¢ùëõùëé ùëêùëôùëéùë†ùëí ùëëùëí ùëüùë¢ùëñùëëùëú ùëöùëúùëôùëíùë†ùë°ùëú ùëöùëéùëôùëñùëõùë°ùëíùëõùëêùëñùëúùëõùëéùëëùëú ùëíùëõ ùëôùëúùë† ùëêùëéùëõùëéùëôùëíùë† ùëëùëí ùë£ùëúùëß, ùëëùëíùëèùëíùëõ ùë†ùëñùëôùëíùëõùëêùëñùëéùëü ùë†ùë¢ ùëöùëñùëêùëüùëúÃÅùëìùëúùëõùëú ùë†ùëñ ùëõùëú ùëíùë†ùë°ùëéÃÅùëõ ‚Ñéùëéùëèùëôùëéùëõùëëùëú.```'}`,

      `**Regla 3** 
            \u200B
            ${'```ùëÜùëí ùëëùëíùëèùëíùëõ ùëôùëíùëíùëü ùëôùëéùë† ùëëùëíùë†ùëêùëüùëñùëùùëêùëñùëúùëõùëíùë† ùëëùëí ùëêùëéùëëùëé ùëêùëéùëõùëéùëô, ùëõùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ùëêùëúùëöùëùùëéùëüùë°ùëñùëü ùëêùëúùëõùë°ùëíùëõùëñùëëùëú ùëìùë¢ùëíùëüùëé ùëëùëíùëô ùëêùëéùëõùëéùëô ùëêùëúùëüùëüùëíùë†ùëùùëúùëõùëëùëñùëíùëõùë°ùëí.```'}`,

      `**Regla 4** 
            \u200B
            ${'```ùê∏ùëô ùëêùëúùëõùë°ùëíùëõùëñùëëùëú ùëÅùëÜùêπùëä ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ùë¢ÃÅùëõùëñùëêùëéùëöùëíùëõùë°ùëí ùëíùëõ üçÜ„Éªcanal_de_sexo. ùëÜùëí ùëùùëüùëú‚ÑéùëñÃÅùëèùëí ùëíùëô ùê∂‚ÑéùëñùëôùëëùëÉùëúùëüùëõ ùë¶ ùëíùëô ùëîùëúùëüùëí.```'}`,

      `**Regla 5** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ùëôùëé ùëùùëüùëúùëùùëéùëîùëéùëõùëëùëé, ùëôùëé ùëùùë¢ùëèùëôùëñùëêùëñùëëùëéùëë ùëëùëíùëèùëí ùë†ùëíùëü ùëéùë¢ùë°ùëúùëüùëñùëßùëéùëëùëé ùëùùëúùëü ùëôùëé ùëéùëëùëöùëñùëõùëñùë†ùë°ùëüùëéùëêùëñùëúÃÅùëõ.```'}`,

      `**Regla 6** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëí ùëéùëèùë¢ùë†ùëéùëü ùëëùëí ùëôùëúùë† ùëíùëöùëúùëóùëñùë†, ‚Ñéùëéùë¶ ùë¢ùëõ ùëôùëñÃÅùëöùëñùë°ùëí ùëëùëí 20 ùëíùëöùëúùëóùëñùë† ùëùùëúùëü ùëöùëíùëõùë†ùëéùëóùëí.```'}`,

      `**Regla 7** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëíùëõ ùëõùëúùëöùëèùëüùëíùë† ùëêùëúùëõ ùë†ùëñÃÅùëöùëèùëúùëôùëúùë† ùëíùë•ùë°ùëüùëéùë£ùëéùëîùëéùëõùë°ùëíùë† ùëõùëñ ùëìùëúùë°ùëúùë† ùëëùëí ùëùùëíùëüùëìùëñùëô ùëÅùëÜùêπùëä.```'}`,

      `**Regla 8** 
            \u200B
            ${'```ùëÜùëúùëôùëú ùë†ùëí ùëùùëíùëüùëöùëñùë°ùëíùëõ ùëëùëúùë† ùëêùë¢ùëíùëõùë°ùëéùë† ùëùùëúùëü ùëùùëíùëüùë†ùëúùëõùëé.```'}`,

      `**Regla 9** 
            \u200B
            ${'```ùëÉùëüùëñùëúùëüùëñùëßùëéùëöùëúùë† ùëíùëô ùëüùëíùë†ùëùùëíùë°ùëú ùëöùë¢ùë°ùë¢ùëú, ùëëùëíùëèùëíùëõ ùëêùë¢ùëñùëëùëéùëü ùëôùëé ùëìùëúùëüùëöùëé ùëëùëí ùëíùë•ùëùùëüùëíùë†ùëéùëüùë†ùëí, ùëõùëú ùëñùëöùëùùëúùëõùëîùëéùëõ ùëñùëëùëíùëéùë† ùë¶ ùëôùëôùëíùë£ùëíùëõ ùëôùëéùë† ùëêùëúùëõùë£ùëíùëüùë†ùëéùëêùëñùëúùëõùëíùë† ùëëùëí ùëöùëéùëõùëíùëüùëé ùë°ùëüùëéùëõùëûùë¢ùëñùëôùëé.```'}`,

      `**Regla 10** 
            \u200B
            ${'```ùëÅùëú ùë†ùëí ùë°ùëúùëôùëíùëüùëé ùëíùëô ùëéùëêùëúùë†ùëú ùëé ùëúùë°ùëüùëúùë† ùëöùëñùëíùëöùëèùëüùëúùë† ùëëùëíùëô ùë†ùëíùëüùë£ùëñùëëùëúùëü, ùëéùëõùë°ùëí ùë¢ùëõ ùëêùëéùë†ùëú ùëêùëúùëöùëùùëüùëúùëèùëéùëëùëú ùë†ùëí ùëúùëùùë°ùëéùëüùëéÃÅ ùëùùëúùëü ùëíùëô ùëèùëéùëõ ùëñùëõùëöùëíùëëùëñùëéùë°ùëú ùë¶ ùë†ùëí ùëõùëúùë°ùëñùëìùëñùëêùëéùëüùëéÃÅ ùëéùëô ùëíùëûùë¢ùëñùëùùëú ùëëùëí ùëëùëñùë†ùëêùëúùëüùëë.```'}`,

      `**Regla 11** 
            \u200B
            ${'```ùê¥ùëèùë†ùë°ùëíÃÅùëõùëîùëéùëõùë†ùëí ùëëùëí ùë†ùëíùëü ùëúùëèùë†ùë°ùëñùëõùëéùëëùëúùë† ùëêùë¢ùëéùëõùëëùëú ùë†ùëí ùëôùëíùë† ùëéùëëùë£ùëñùëíùëüùë°ùëé ùë†ùëúùëèùëüùëí ùëéùëôùëîùë¢ùëõùëé ùëéùëêùëêùëñùëúÃÅùëõ, ùëöùëéùëõùë°ùëíùëõùëíùëü ùëíùëô ùëúùëüùëëùëíùëõ ùëëùëí ùëôùëé ùëêùëúùëöùë¢ùëõùëñùëëùëéùëë ùëíùë† ùë¢ùëõùëé ùëôùëéùëèùëúùëü ùëëùëí ùë°ùëúùëëùëúùë† ùëôùëúùë† ùëèùëúùëõùëúùëèùëúùë†.```'}`,
    ];

    const selectedRule = rules[rule - 1];

    return selectedRule;
  }

  private crearEmbedDenuncia(
    message: Discord.Message,
    denunciado: string,
    canal: string,
    regla: string
  ): Discord.MessageEmbed {
    let template = new Discord.MessageEmbed()
      .attachFiles(this.migdrplogo as any)
      .attachFiles(this.bonobotlogo as any)
      .setColor('#e31452')
      .setAuthor(
        'DENUNCIA BON√ìBICA',
        'attachment://migdrp-icon.png',
        'https://www.youtube.com/channel/UCeMZYaa2pooHfDmc3hZabmg'
      )
      .setThumbnail('attachment://bb-logo.png')

      .setDescription(
        `El usuario **${message.author.username}** con ID **${message.author.id}** ha levantado una denuncia an√≥nima`
      )
      .addFields({
        name: '\u200B',
        value: `
**Usuario denunciado:** ${denunciado}
\u200B
**Canal de los sucesos:** ${canal}
\u200B
**El usuario incumpli√≥ la** ${regla}
\u200B
        `,
      })
      .setTimestamp()
      .setFooter(
        'Fecha y hora de la denuncia:',
        'attachment://migdrp-icon.png'
      );

    return template;
  }

  private async checkSelectedChannel(message: Discord.Message) {
    try {
      const channelFound = message.guild.channels.cache.findKey(
        (channel) => channel.name === this.channel
      );

      if (channelFound) {
        console.log('Channel Found: ', channelFound);
        return channelFound;
      }

      console.log('Channel not found..');

      return null;
    } catch (e) {
      console.log('Error on checkSelectedChannel().. ', e);
    }
  }

  private async getSelectedChannel(client: Discord.Client, id: string) {
    try {
      const channelFound = client.channels.fetch(id);
      return channelFound;
    } catch (e) {
      console.log('Error on getSelectedChannel().. ', e);
    }
  }

  private cleanUsers() {
    this.usuarios = [];
  }

  private async compareUserDates(
    user: UserCmdInfo,
    msgObject: Discord.Message
  ): Promise<boolean> {
    try {
      const currentUserId = msgObject.author.id;
      const actualDate = new Date(Date.now());

      const usersRegistered = await this.usuarios.find((user) => {
        if (user.user_id === currentUserId) {
          return user;
        }
      });

      if (usersRegistered) {
        console.log('User FOUND comparing dates... ');

        const userDate = new Date(usersRegistered.last_call);

        var diffMs = (actualDate as any) - (userDate as any);
        var diffDays = Math.floor(diffMs / 86400000);
        var diffHrs = Math.floor((diffMs % 86400000) / 3600000);
        var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);

        console.log(
          diffDays + ' days, ' + diffHrs + ' hours, ' + diffMins + ' difference'
        );

        if (diffMins > 1) {
          this.usuarios = this.usuarios.filter(
            (user) => user.user_id !== currentUserId
          );
          console.log('Filtered: ', this.usuarios);
          this.usuarios.push({ user_id: currentUserId, last_call: Date.now() });

          return true;
        } else {
          return false;
        }
      } else {
        console.log('User NOT found pushing user.. ');
        this.usuarios.push(user);
        console.log('Usuarios: ', this.usuarios);
        return true;
      }
    } catch (e) {
      console.log('Error on getSelectedChannel().. ', e);
    }
  }

  constructor() {
    console.log('Denuncia Command Instantiated');
    console.log('hosturl', getHostUrl());
    this.attachFiles();
    console.log('Attached logo files: ', this.migdrplogo);
    console.log('Attached logo files: ', this.bonobotlogo);
  }

  public help(): string {
    return 'Comando de generaci√≥n de temarios de la Comunidad Bon√≥bica';
  }

  public isThisCommand(command: string): boolean {
    return command === this._command;
  }

  public async runCommand(
    args: string[],
    msgObject: Discord.Message,
    client: Discord.Client
  ) {
    if (!validateCommandRestrictions(this._command, msgObject)) {
      return;
    }

    if (
      !(await this.compareUserDates(
        { user_id: msgObject.author.id, last_call: Date.now() },
        msgObject
      ))
    ) {
      msgObject.author.send('No puedes levantar denuncias tan r√°pido...');
      return;
    }

    const channel_ID = await this.checkSelectedChannel(msgObject);

    if (channel_ID === null) {
      msgObject.author.send(
        'No encuentro el canal de denuncias, no puedo postear tu denuncia.'
      );
      return;
    }

    const channelDenuncias = (await this.getSelectedChannel(
      msgObject.client,
      channel_ID
    )) as Discord.TextChannel;

    if (args.length > 0) {
      if (args[0] === '') {
        msgObject.author.send('Faltan argumentos (denunciado)');
        console.log(`Args: `, args);
        return;
      } else if (args[1] === '') {
        msgObject.author.send('Faltan argumentos (canal)');
        console.log(`Args: `, args);
        return;
      } else if (args[2] === '') {
        msgObject.author.send('Faltan argumentos (regla)');

        console.log(`Args: `, args);
        return;
      } else {
        if (
          args[2] !== '1' &&
          args[2] !== '2' &&
          args[2] !== '3' &&
          args[2] !== '4' &&
          args[2] !== '5' &&
          args[2] !== '6' &&
          args[2] !== '7' &&
          args[2] !== '8' &&
          args[2] !== '9'
        ) {
          msgObject.author.send('Lo siento Bonobo, esa regla no existe');
          return;
        }

        const rule = this.getRule(parseInt(args[2]));

        channelDenuncias.send(
          this.crearEmbedDenuncia(msgObject, args[0], args[1], rule)
        );
        msgObject.author.send(
          'He mandado tu denuncia. Gracias por hablar conmigo, me siento solo y me aburro :C'
        );
      }
    }
  }
}

